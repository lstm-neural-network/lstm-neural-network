## Analysis


'''
#Downloading the Data
```{python}



import yfinance as yf
from datetime import datetime
import pandas as pd
import numpy as np

#Stocks that we'll be analyzing
AAPL = ['AAPL']
GM = ['GM']

#Set start and end date for the data pull
#We want to look at the past 5 years, so we'll pull the previous 5 years of data
end_time = datetime.now()
start_time = datetime(end_time.year - 5, end_time.month, end_time.day)

#download the stocks we want to model 
AAPL = yf.download(AAPL, start_time, end_time)

#Adding additional columns
AAPL['pct_change'] = AAPL.Close.pct_change(periods = 1)
AAPL['EMA20'] = AAPL['Close'].ewm(span=20).mean()

AAPL.head(10)

#Dropping unnecessary columns
AAPL = AAPL.drop(columns= ['Open', 'Low', 'Adj Close', 'High'])
AAPL.head(10)


# Normalizing our data set
from sklearn.preprocessing import MinMaxScaler
LSTM_scaler = MinMaxScaler(feature_range=(0, 1))
LSTM_scaled = LSTM_scaler.fit_transform(AAPL)
print(LSTM_scaled[:10])

#Splitting our data into 80/20 training/testing sets

#Assigning the target variable
y = LSTM_scaled[:,1]

#replacing the nan value with the mean
y[0] = y[1:].mean()

#Dropping the first column with Nan and the y from the features
LSTM_scaled = np.delete(LSTM_scaled, 2, axis=1)

from sklearn.model_selection import train_test_split
LSTM_Xtrain, LSTM_Xtest, LSTM_ytrain, LSTM_ytest = train_test_split(LSTM_scaled, y, test_size=0.2, random_state=1)


LSTM_Xtrain = LSTM_Xtrain.reshape((LSTM_Xtrain.shape[0],1,LSTM_Xtrain.shape[1]))
LSTM_Xtest = LSTM_Xtest.reshape((LSTM_Xtest.shape[0],1,LSTM_Xtest.shape[1]))

print(LSTM_Xtrain)
#model 

import tensorflow as tf
import keras as ke
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
LSTM_model = ke.Sequential()
LSTM_model.add(LSTM(500, return_sequences=True, dropout=0.2, input_shape=(LSTM_Xtrain.shape[1], LSTM_Xtrain.shape[-1])))
#LSTM_model.add(Dropout(0.2))
LSTM_model.add(Dense(1, activation='linear'))
LSTM_model.compile(optimizer='adam' , loss= 'mean_squared_error', metrics=['accuracy'])

LSTM_model.fit(LSTM_Xtrain, LSTM_ytrain, batch_size=32, epochs=150)  

loss, accuracy = LSTM_model.evaluate(LSTM_Xtest, LSTM_ytest)
predictions = LSTM_model.predict(LSTM_Xtest)

print(predictions)
print(LSTM_ytest)


```